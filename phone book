import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import json

contacts_data = []

class contactbookapp:
    def __init__(self, root):
        self.root = root
        self.root.title("CONTACT BOOK")
        self.root.geometry("1000x600")

        # setting up background image
        background_image = Image.open("24391.jpg")
        self.background_photo = ImageTk.PhotoImage(background_image)
        bg_label = tk.Label(root, image=self.background_photo)
        bg_label.place(x=0, y=0, relwidth=1, relheight=1)

        self.label = tk.Label(root, text="WELCOME TO CONTACT BOOK.", font=("Helvetica", 25), bg="#8B4513")
        self.label.place(x=510, y=10)

        # Entry field for search
        self.search_entry = tk.Entry(root, font=("Helvetica", 15))
        self.search_entry.place(x=400, y=60)

        # Search button
        self.search_button = tk.Button(root, text="SEARCH", command=self.search_contacts, font=("Helvetica", 15), bg= "orange")
        self.search_button.place(x=600, y=60)

        # setting up all required buttons.
        self.add_contact_button = tk.Button(root, text="ADD CONTACT", command=self.add_contact, font=("Helvetica", 15), bg= "green")
        self.add_contact_button.place(x=400, y=100)
        self.del_contact_button = tk.Button(root, text="DELETE CONTACT", font=("Helvetica", 15), bg="red", command=self.delete_selected_contact)
        self.del_contact_button.place(x=400, y=150)
        self.edit_contact_button = tk.Button(root, text="EDIT CONTACT", font=("Helvetica", 15), bg="yellow", command=self.edit_contact)
        self.edit_contact_button.place(x=400, y=200)
        self.look_all_contact_button = tk.Button(root, text="LOOK ALL", font=("Helvetica", 15), bg="blue", command=self.look_all_contacts)
        self.look_all_contact_button.place(x=400, y=250)

        self.task_list = tk.Listbox(root, font=("Helvetica", 24), selectmode=tk.SINGLE)
        self.task_list.place(x=600, y=100, relwidth=0.4, relheight=0.7)  # Adjust the relheight value as needed
        self.load_contacts_from_file()
        # Bind a function to the search entry to update search results on every keypress
        self.search_entry.bind('<KeyRelease>', self.search_contacts)

    def save_contact(self):
        name = self.name_entry.get()
        phone = self.phone_entry.get()
        if name and phone:
            if phone.isdigit() and len(phone) == 10:
                # Save the contact information in the list
                contact_info = {
                    "Name": name,
                    "Phone": phone,
                    "Email": self.email_entry.get(),
                    "Address": self.address_entry.get()
                }
                contacts_data.append(contact_info)
                self.update_contact_list()  # Update the contact list after adding a new contact
                self.main.destroy()  # Close the contact entry window
            else:
                messagebox.showerror("Error", "Check the number you entered")
        else:
            messagebox.showerror("Error", "Name and Phone are mandatory fields!")
        self.save_contacts_to_file()

    def delete_selected_contact(self):
        selected_index = self.task_list.curselection()
        if selected_index:
            index = selected_index[0]  # Get the first selected index
            contacts_data.pop(index)  # Remove the selected contact from the list
            self.update_contact_list()  # Update the displayed contact list
        else:
            messagebox.showerror("Error", "Select a contact to delete.")
        self.save_contacts_to_file()

    def update_contact_list(self, contacts=None):
        # Clear the current list of contacts in the Listbox
        self.task_list.delete(0, tk.END)

        if contacts is None:
            contacts = contacts_data

        # Iterate through the contacts and add them to the Listbox
        for contact in contacts:
            self.task_list.insert(tk.END, f"Name: {contact['Name']}         Phone: {contact['Phone']}")

    def edit_contact(self):
        selected_index = self.task_list.curselection()
        if not selected_index:
            messagebox.showerror("Error", "Select a contact to edit.")
            return

        index = selected_index[0]
        selected_contact = contacts_data[index]

        main = tk.Toplevel(root)
        main.title("Edit Contact")
        main.geometry("300x400")

        name_label = tk.Label(main, text="Name*:", font=("Helvetica", 15))
        name_entry = tk.Entry(main)
        name_entry.insert(0, selected_contact['Name'])  # Pre-fill with existing name
        name_label.place(x=30, y=40)
        name_entry.place(x=130, y=40)

        phone_label = tk.Label(main, text="Phone*:", font=("Helvetica", 15))
        phone_entry = tk.Entry(main)
        phone_entry.insert(0, selected_contact['Phone'])  # Pre-fill with existing phone
        phone_label.place(x=30, y=80)
        phone_entry.place(x=130, y=80)

        email_label = tk.Label(main, text="Email:", font=("Helvetica", 15))
        email_entry = tk.Entry(main)
        email_entry.insert(0, selected_contact['Email'])  # Pre-fill with existing email
        email_label.place(x=30, y=120)
        email_entry.place(x=130, y=120)

        address_label = tk.Label(main, text="Address:", font=("Helvetica", 15))
        address_entry = tk.Entry(main)
        address_entry.insert(0, selected_contact['Address'])  # Pre-fill with existing address
        address_label.place(x=30, y=160)
        address_entry.place(x=130, y=160)

        def save_edited_contact():
            name = name_entry.get()
            phone = phone_entry.get()
            if name and phone:
                selected_contact['Name'] = name
                selected_contact['Phone'] = phone
                selected_contact['Email'] = email_entry.get()
                selected_contact['Address'] = address_entry.get()
                self.update_contact_list()  # Update the displayed contact list
                main.destroy()
            else:
                messagebox.showerror("Error", "Name and Phone are mandatory fields!")

        submit_button = tk.Button(main, text="Save", font=("Helvetica", 15), command=save_edited_contact)
        submit_button.place(x=60, y=200)

        def look_all_contacts(self):
        # Clear the current list of contacts in the Listbox
        self.task_list.delete(0, tk.END)

        if not contacts_data:
            messagebox.showinfo("No Contacts", "There are no contacts to display.")
            return

        for contact in contacts_data:
            self.task_list.insert(tk.END, f"Name: {contact['Name']}         Phone: {contact['Phone']}")

    def save_contacts_to_file(self):
        # Save contacts to a JSON file
        with open("contacts.json", "w") as file:
            json.dump(contacts_data, file)

    def load_contacts_from_file(self):
        # Load contacts from a JSON file if it exists
        try:
            with open("contacts.json", "r") as file:
                loaded_contacts = json.load(file)
                contacts_data.extend(loaded_contacts)
        except FileNotFoundError:
            pass

    def add_contact(self):
        self.main = tk.Toplevel(root)
        self.main.title("Hey there, let's add a contact.")
        self.main.geometry("300x400")

        name_label = tk.Label(self.main, text="Name*:", font=("Helvetica", 15))
        self.name_entry = tk.Entry(self.main)
        name_label.place(x=30, y=40)
        self.name_entry.place(x=130, y=40)

        phone_label = tk.Label(self.main, text="Phone*:", font=("Helvetica", 15))
        self.phone_entry = tk.Entry(self.main)
        phone_label.place(x=30, y=80)
        self.phone_entry.place(x=130, y=80)

        email_label = tk.Label(self.main, text="Email:", font=("Helvetica", 15))
        self.email_entry = tk.Entry(self.main)
        email_label.place(x=30, y=120)
        self.email_entry.place(x=130, y=120)

        address_label = tk.Label(self.main, text="Address:", font=("Helvetica", 15))
        self.address_entry = tk.Entry(self.main)
        address_label.place(x=30, y=160)
        self.address_entry.place(x=130, y=160)

        submit_button = tk.Button(self.main, text="SUBMIT", font=("Helvetica", 15), command=self.save_contact)
        submit_button.place(x=60, y=200)

    def search_contacts(self, event):
        search_query = self.search_entry.get().lower()
        matching_contacts = [contact for contact in contacts_data if contact['Name'].lower().startswith(search_query)]
        self.update_contact_list(matching_contacts)
if __name__ == '__main__':
    root = tk.Tk()
    app = contactbookapp(root)
    app.update_contact_list()  # Update the contact list when the application starts
    root.mainloop()
